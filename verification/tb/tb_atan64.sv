/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the Floating-Point Design Generator.
 *
 * Author: Xiaokun Yang and Maria Vega, University of Houston Clear Lake 
 * Date: June 2022
 *
 * For more information, see the project website at:
 * https://sceweb.sce.uhcl.edu/xiaokun/OpenIC/
 *
//   Latency: 1 cycle per addition
//   Precision: Single bit
//   Resources required: 16 adders (32 x 32 bit)
*/


module tb_atan();
parameter TEST_SIZE = 5;

parameter ERROR_TOLERANCE = 1;
localparam real PI = 3.141592653589793;
reg [63:0]  output_theta[TEST_SIZE-1:0]; 
reg [63:0]  input_y[TEST_SIZE-1:0];

`include "tb_func_atan_64.sv"

initial begin
   $readmemh("../golden/rtl-y-input64.txt",input_y);
   $readmemh("../golden/rtl-atan-output64.txt",output_theta);
end

reg         io_ready;
reg         clock;
reg         reset;
reg  [63:0] io_in;
wire [63:0] io_out;
wire        io_valid ;

 always #5 clock = ~clock;

Atan_n64_pd64_bw64 u_Atan_n64_pd64_bw64(
  .clock (clock ),
  .reset (reset ),
  .io_ready (io_ready ),
  .io_in (io_in ),
  .io_valid (io_valid ),
  .io_out(io_out)
);
  
integer i; 
real dut_in_real, golden_real, dut_out_real, error_percent;
initial begin
   reset = 1'b1;
   clock = 1'b0;
   io_in = 64'h0;  
   io_ready = 1'b0;
   #12;
   reset = 1'b0;
   @(posedge clock);

  io_ready = 1'b1;
  for (i=0; i < TEST_SIZE; i = i+1) begin
    io_in = input_y[i];  
    dut_in_real=ieee754_to_fp(io_in); //*180/PI;
    $display("At %dns, the input y: %h and %f", $time, io_in, dut_in_real);
    @(posedge clock);
  end
   io_ready = 1'b0;
end
integer j =0;
initial begin
  wait (~reset);
  @(posedge clock);
  @(negedge clock);
   while (j  < TEST_SIZE) begin
	@(posedge clock);
	if (io_valid) begin


       golden_real=ieee754_to_fp(output_theta[j])*180/PI;
      dut_out_real=ieee754_to_fp(io_out)*180/PI;
      //golden_real=ieee754_to_fp(output_theta[j]);
      //dut_out_real=ieee754_to_fp(io_out);
      if(output_theta[j]==64'h0000000000000000) begin
        if((golden_real-dut_out_real<=0.00001)|(dut_out_real-golden_real<=0.00001)) begin //if less than 0.001 pass the test
          error_percent=1;
        end else begin
          error_percent=2;
        end
        //$display("Monitor at %dns, cos output: %f, expected: %f", $time, dut_out_real, golden_real);
      end else begin
        error_percent  = (dut_out_real-golden_real)/golden_real*100;
        if (error_percent < 0) begin
            error_percent  = -error_percent;
        end
      end

    if(error_percent<=ERROR_TOLERANCE) begin
      //$display("At %dns, the test case PASS! error_percent: %f, cos output: %h, expected: %h", $time, error_percent, io_out, output_theta[j]);
      $display("At %dns, the test case PASS! error_percent: %f, arctan output: %f, expected: %f", $time, error_percent, dut_out_real, golden_real);
      //$display("At %dns, the test case Pass! error_percent: %f, cos output: %h", $time, error_percent, output_theta[j]);
      //$display("At %dns, the test case Pass! error_percent: %f, cos output: %f", $time, error_percent, golden_real);
    end else begin
      //$display("At %dns, the test case FAIL! error_percent: %f, cos output: %h, expected: %h", $time, error_percent, io_out, output_theta[j]);
      $display("At %dns, the test case FAIL! error_percent: %f, arctan output: %f, expected: %f", $time, error_percent, dut_out_real, golden_real);
   end
    j = j+1;
    end
   end
 end
endmodule 
