/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the Floating-Point Design Generator.
 *
 * Author: Xiaokun Yang and Maria Vega, University of Houston Clear Lake 
 * Date: June 2022
 *
 * For more information, see the project website at:
 * https://sceweb.sce.uhcl.edu/xiaokun/OpenIC/
 *
//   Latency: 1 cycle per addition
//   Precision: Single bit
//   Resources required: 16 adders (32 x 32 bit)
*/


module tb_sin();
parameter TEST_SIZE = 10000;
`ifdef SIN_N32_PD32_BW32
parameter LATENCY = 68; //34+32+2
`elsif SIN_N32_PD16_BW32
parameter LATENCY = 52; //? 34+16+2
`elsif SIN_N32_PD8_BW32
parameter LATENCY = 44; //34+8+2
`elsif SIN_N32_PD4_BW32
parameter LATENCY = 40; //34+4+2
`elsif SIN_N32_PD1_BW32
parameter LATENCY = 37; //34+1+2
`endif

parameter ERROR_TOLERANCE = 1;
localparam real PI = 3.141592653589793;
reg [31:0]  output_sin[TEST_SIZE-1:0]; 
reg [31:0]  input_theta[TEST_SIZE-1:0];

`include "tb_func.sv"

initial begin
   $readmemh("../golden/rtl-theta-input.txt",input_theta);
   $readmemh("../golden/rtl-sin-output.txt",output_sin);
end

reg         clock;
reg         reset;
reg  [31:0] io_in;
wire [31:0] io_out;

 always #5 clock = ~clock;

Sin u_Sin(
  .clock (clock ),
  .reset (reset ),
  .io_in (io_in ),
  .io_out(io_out)
);
  
integer i,j; 
integer theta_input;
real dut_in_real, golden_real, dut_out_real, error_percent;
initial begin
   reset = 1'b1;
   clock = 1'b0;
   io_in = 32'h0;  
   #12;
   reset = 1'b0;
   @(posedge clock);

`ifdef SIN_N32_PD32_BW32
  theta_input=$fopen("./sin_n32_pd32_bw32/theta_input.log","w");
`elsif SIN_N32_PD16_BW32
  theta_input=$fopen("./sin_n32_pd16_bw32/theta_input.log","w");
`elsif SIN_N32_PD8_BW32
  theta_input=$fopen("./sin_n32_pd8_bw32/theta_input.log","w");
`elsif SIN_N32_PD4_BW32
  theta_input=$fopen("./sin_n32_pd4_bw32/theta_input.log","w");
`elsif SIN_N32_PD1_BW32
  theta_input=$fopen("./sin_n32_pd1_bw32/theta_input.log","w");
`endif
  for (i=0; i < TEST_SIZE; i = i+1) begin
    io_in = input_theta[i];  
    dut_in_real=ieee754_to_fp(io_in)*180/PI;
    $fwrite(theta_input, "At %dns, the input theta: %h and %f", $time, io_in, dut_in_real);
    @(posedge clock);
  end
  $fclose(theta_input);
end

integer sin_report;
integer sin_report_ieee754;

initial begin
  wait (~reset);
  @(posedge clock);
  @(negedge clock);
  repeat(LATENCY) @(negedge clock);
`ifdef SIN_N32_PD32_BW32
  sin_report=$fopen("./sin_n32_pd32_bw32/sin_report.log","w");
  sin_report_ieee754=$fopen("./sin_n32_pd32_bw32/sin_report_ieee754.log","w");
`elsif SIN_N32_PD16_BW32
  sin_report=$fopen("./sim/sin/sin_n32_pd16_bw32_report.log","w");
  sin_report_ieee754=$fopen("./sin_n32_pd16_bw32/sin_report_ieee754.log","w");
`elsif SIN_N32_PD8_BW32
  sin_report=$fopen("./sim/sin/sin_n32_pd8_bw32_report.log","w");
  sin_report_ieee754=$fopen("./sin_n32_pd8_bw32/sin_report_ieee754.log","w");
`elsif SIN_N32_PD4_BW32
  sin_report=$fopen("./sim/sin/sin_n32_pd4_bw32_report.log","w");
  sin_report_ieee754=$fopen("./sin_n32_pd4_bw32/sin_report_ieee754.log","w");
`elsif SIN_N32_PD1_BW32
  sin_report=$fopen("./sim/sin/sin_n32_pd1_bw32_report.log","w");
  sin_report_ieee754=$fopen("./sin_n32_pd1_bw32/sin_report_ieee754.log","w");
`endif
      $fwrite(sin_report, "==========================================\n");
      $fwrite(sin_report, "Sin Simulation\n"                    );
      $fwrite(sin_report, "==========================================\n");
      $fwrite(sin_report_ieee754, "==========================================\n");
      $fwrite(sin_report_ieee754, "Sin Simulation\n"                    );
      $fwrite(sin_report_ieee754, "==========================================\n");

  for (j=0; j < TEST_SIZE; j = j+1) begin
      golden_real=ieee754_to_fp(output_sin[j]);
      dut_out_real=ieee754_to_fp(io_out);
      //if(output_sin[j]==32'h0) begin //248d3132 is 6.123x10^-17 and b2a00000 is -1.8626x10^-8 which are effectively zeros
      //  if((golden_real-dut_out_real<=0.00001)|(dut_out_real-golden_real<=0.00001)) begin //if less than 0.001 pass the test
      //    error_percent=1;
      //  end else begin
      //    error_percent=2;
      //  end
      //end else begin
        error_percent  = (dut_out_real-golden_real)/golden_real*100;
        if (error_percent < 0) begin
            error_percent  = -error_percent;
        end
      //end

    if(error_percent<=ERROR_TOLERANCE) begin
      $fwrite(sin_report,"At %dns, the test case PASS! error_percent: %f, sin output: %f, expected: %f\n", $time, error_percent, dut_out_real, golden_real);
      $fwrite(sin_report_ieee754,"At %dns, the test case PASS! error_percent: %f, sin output: %h, expected: %h\n", $time, error_percent, io_out, output_sin[j]);
    end else begin
      $fwrite(sin_report,"At %dns, the test case FAIL! error_percent: %f, sin output: %f, expected: %f\n", $time, error_percent, dut_out_real, golden_real);
      $fwrite(sin_report_ieee754,"At %dns, the test case FAIL! error_percent: %f, sin output: %h, expected: %h\n", $time, error_percent, io_out, output_sin[j]);
    end
    @(negedge clock);
  end
  
  $fclose(sin_report);
  $fclose(sin_report_ieee754);
end
endmodule

